# /etc/nginx/sites-available/default

# Redirect HTTP traffic to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name drivethrudrop.com www.drivethrudrop.com;

    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS server block
server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name drivethrudrop.com www.drivethrudrop.com;

    # SSL Certificates
    ssl_certificate /etc/letsencrypt/live/drivethrudrop.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/drivethrudrop.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Security headers (optional, but recommended for added security)
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";

    # Location for the React frontend
    location / {
        root /home/ubuntu/Support-System-Frontend/dist;
        index index.html;
        try_files $uri $uri/ /index.html;  # Ensure React Router works
    }

    # Proxy requests to the Node.js backend
    location /api {
        rewrite ^/api/(.*)$ /$1 break;  # Strip the /api prefix before forwarding
        proxy_pass http://localhost:3001;  # Forward requests to your backend over HTTP
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        # Additional headers (optional, depending on backend needs)
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Handle 404 errors for React frontend routing
    error_page 404 /index.html;

    # Gzip compression for better performance
    gzip on;
    gzip_types text/plain application/xml text/css application/javascript application/json image/svg+xml image/x-icon;     
}
